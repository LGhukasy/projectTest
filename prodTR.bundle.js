!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){e.exports=require("zeromq")},function(e,t){e.exports=require("socket.io")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("async-redis")},function(e,t){e.exports=require("events")},function(e,t,n){n(7),e.exports=n(10)},function(e,t){e.exports=require("babel-polyfill")},function(e,t){e.exports=require("pm-intercom")},function(e,t){e.exports=require("body-parser")},function(e,t,n){"use strict";n.r(t);n(8);const r={NODE_STATUS:0,LIST_ROOMS:10,CREATE_ROOM:11,REMOVE_ROOM:12},s={CURRENT_ROOMS:5},o={serverId:parseInt(process.env.SERVER_ID),nodeId:parseInt(process.env.NODE_ID),kind:process.env.KIND,connectionAddress:{host:process.env.PUSH_HOST,port:parseInt(process.env.PUSH_PORT)},runningAddress:{host:process.env.PULL_HOST,port:parseInt(process.env.PULL_PORT)},serverAddress:{host:process.env.SERVER_HOST,port:parseInt(process.env.SERVER_PORT)},publicAddress:{host:process.env.PUBLIC_HOST,port:parseInt(process.env.PUBLIC_PORT),socketPath:process.env.SOCKET_PATH}};var c=n(0),i=n.n(c),p=n(1),a=n.n(p),d=n(2),l=n.n(d),u=n(3),S=n.n(u);n(9);class f{static createApp(){f.app=S()()}static setupExpress(){f.app.server=l.a.createServer(f.app),f.app.disable("x-powered-by"),f.app.server.listen(o.serverAddress.port,()=>{console.log(`Server listening on http://${o.serverAddress.host}:${o.serverAddress.port}`)})}static getApp(){return f.app}}var g=n(4),O=n.n(g);const v=`n-${o.serverId}-${o.nodeId}_`;class _{static connect(){_.client=O.a.createClient(),_.client.on("ready",()=>{console.log("Redis connection opened")}),_.client.on("error",()=>{console.log("Can not connect to redis")})}static async setter(e,t,n){e=v+e;try{return await _.client.SETEX(e,t,JSON.stringify(n))}catch(e){return console.log("RedisModule/setter Error: ",e),!1}}static async getter(e){e=v+e;try{const t=await _.client.get(e);return JSON.parse(t)}catch(e){return console.log("RedisModule/getter Error: ",e),!1}}static async deleter(e){e=v+e;try{return await _.client.del(e)}catch(e){return console.log("RedisModule/deleter Error: ",e),!1}}}var k=n(5),E=n.n(k);class m extends E.a{constructor(){super()}add(e,t){const n=e=>{t.emit("reconnect",e)};this.once(`disconnect_token-${e}`,()=>{t.notSend=!0,t.disconnect(),this.removeListener(`reconnect_token-${e}`,n)}),this.once(`error_token-${e}`,()=>{t.emit("error-message",{message:"Low balance."})}),this.on(`reconnect_token-${e}`,n)}disconnect(e){this.emit(`disconnect_token-${e}`)}error(e){this.emit(`error_token-${e}`),this.disconnect(e)}reconnect(e,t){this.emit(`reconnect_token-${e}`,t)}}class h{static initService(){h.io=a()(f.app.server,{path:o.publicAddress.socketPath}),h.setupPendingNamespace()}static setupPendingNamespace(){h.pendingSocketEventEmitter=new m,h.pendingNamespace=h.io.of("/pending"),h.pendingNamespace.on("connection",async e=>{b.sendMessage(r.LIST_ROOMS,null,e),e.on("create-room",t=>{b.sendMessage(r.CREATE_ROOM,t,e)}),e.on("disconnect",()=>{console.log("Socket disconnect")})})}static sendErrorMessage(e){h.pendingSocketEventEmitter.error(e.token)}}const y=i.a.socket("push",{}),R=i.a.socket("pull",{});class b{static initService(){b.io=null,b.clientSocket=null,b.pullSocket=R,b.pushSocket=y,b.pullSocket.bindSync(`tcp://${o.runningAddress.host}:${o.runningAddress.port}`),b.pushSocket.connect(`tcp://${o.connectionAddress.host}:${o.connectionAddress.port}`),b.sendMessage(),b.listening()}static listening(){b.pullSocket.on("message",e=>{const t=JSON.parse(e);for(let e of t)switch(e.type){case s.CURRENT_ROOMS:b.clientSocket.emit("rooms-list",{rooms:e.rooms});break;case r.PENDING_CONNECT:b.clientSocket.emit("pending",{pending:"Pending..."});break;case r.PENDING_DISCONNECT:b.clientSocket.emit("disconnect",{disconnect:"success"})}})}static sendMessage(e,t,n){switch(b.clientSocket=n,e){case r.LIST_ROOMS:{let t=[{type:e,from:"pm-transporter",node:{serverId:1,nodeId:1,kind:"Transport Node",info:"info info"}}];b.pushSocket.send(JSON.stringify(t));break}case r.CREATE_ROOM:b.pushSocket.send(JSON.stringify(t));break;case r.NODE_STATUS:{let t=[{type:e,from:"pm-transporter",node:{serverId:1,nodeId:1,kind:"transport-node",info:{serverAddress:8012,runningAddress:{host:"127.0.0.1",port:6666},publicAddress:123456}}}];b.pushSocket.send(JSON.stringify(t));break}}}}f.createApp(),f.setupExpress(),_.connect(),h.initService(),b.initService()}]);
//# sourceMappingURL=prod.bundle.js.map